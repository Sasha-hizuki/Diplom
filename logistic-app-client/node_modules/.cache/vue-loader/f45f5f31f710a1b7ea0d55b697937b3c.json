{"remainingRequest":"C:\\Users\\512Dell\\OneDrive\\Рабочий стол\\Logistic-main\\logistic-app-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\512Dell\\OneDrive\\Рабочий стол\\Logistic-main\\logistic-app-client\\src\\components\\Map.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\512Dell\\OneDrive\\Рабочий стол\\Logistic-main\\logistic-app-client\\src\\components\\Map.vue","mtime":1611580929000},{"path":"C:\\Users\\512Dell\\OneDrive\\Рабочий стол\\Logistic-main\\logistic-app-client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1678708697478},{"path":"C:\\Users\\512Dell\\OneDrive\\Рабочий стол\\Logistic-main\\logistic-app-client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1678708699606},{"path":"C:\\Users\\512Dell\\OneDrive\\Рабочий стол\\Logistic-main\\logistic-app-client\\node_modules\\postcss-loader\\src\\index.js","mtime":1678708698278},{"path":"C:\\Users\\512Dell\\OneDrive\\Рабочий стол\\Logistic-main\\logistic-app-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678708696770},{"path":"C:\\Users\\512Dell\\OneDrive\\Рабочий стол\\Logistic-main\\logistic-app-client\\node_modules\\vue-loader\\lib\\index.js","mtime":1678708698721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubWFwIHsKICBoZWlnaHQ6IDEwMHZoOwp9ICAgCg=="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA","file":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"map\" id=\"map\">\n      <div id=\"mapContainer\" style=\"height:100%;width:100%\" ref=\"map\"></div>\n    </div>\n</template>\n\n<script>\nexport default {\n  name: \"HereMap\",\n  data(){\n    return{\n      platform: {},\n      map: {},\n      routingService: {}\n    }\n  },\n  props: {\n    apiKey: String,\n    center: Object,\n    zoom: String\n  },\n  created(){    \n    const H = window.H;\n    this.platform = new H.service.Platform({\n      \"apiKey\": \"hmElVIv8inBvHDEg0ywBk5bAsYOXG09ElG5Mna_Fmdk\"\n    });\n    this.routingService = this.platform.getRoutingService();\n    this.$root.$refs.MapComponent = this\n  },\n  mounted(){\n    const H = window.H;\n    this.map = new H.Map(\n      this.$refs.map,\n      this.platform.createDefaultLayers().vector.normal.map,\n      {\n        zoom: 6,\n        center: { lat: this.center.lat, lng: this.center.lng}\n      }\n    );\n      new H.mapevents.Behavior(new H.mapevents.MapEvents(this.map));\n      var maptypes = this.platform.createDefaultLayers();\n      H.ui.UI.createDefault(this.map, maptypes);\n  },\n  methods:{\n    dropOrder: function(order){\n      this.removeOrder();\n      const H = window.H;\n      // let fromImage = '';\n      // let toImage = '';\n      // let fromIcon = new H.map.Icon(fromImage);\n      // let toIcon = new H.map.Icon(toImage);\n      let fromMarker = new H.map.Marker(\n        { \n          lat:order.fromLocation.split(',')[0], \n          lng:order.fromLocation.split(',')[1]\n        },\n        {\n          //icon:fromIcon\n        }\n      );\n      let toMarker = new H.map.Marker(\n        { \n          lat:order.toLocation.split(',')[0], \n          lng:order.toLocation.split(',')[1]\n        },\n        {\n          //icon:toIcon\n        }\n      );\n      this.map.addObject(fromMarker);\n      this.map.addObject(toMarker);\n      this.drawRoute(order.fromLocation, order.toLocation);\n    },\n    removeOrder: function(){\n      this.map.removeObjects(this.map.getObjects())\n    },\n    async drawRoute(start, finish){\n      const H = window.H;\n      await this.routingService.calculateRoute(\n        {\n          \"mode\":\"fastest;car;traffic:enabled\",\n          \"waypoint0\":`${start.split(',')[0]},${start.split(',')[1]}`,\n          \"waypoint1\":`${finish.split(',')[0]},${finish.split(',')[1]}`,\n          \"representation\":\"display\"\n        },\n        data => {\n          if(data.response.route.length > 0){\n            let lineString = new H.geo.LineString();\n            data.response.route[0].shape.forEach(point => {\n              let [lat, lng] = point.split(\",\");\n              lineString.pushPoint({lat:lat,lng:lng});\n            });\n            let polyline = new H.map.Polyline(\n              lineString,\n              {\n                style:{\n                  lineWidth: 5\n                }\n              }\n            );\n            this.map.addObject(polyline);\n          }\n        },\n        error => {\n          console.error(error)\n        }\n      );\n    }\n  }\n}\n</script>\n\n<style>\n.map {\n  height: 100vh;\n}   \n</style>"]}]}